/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
import { HttpResponse, http } from "msw"
import { faker } from "@faker-js/faker"

faker.seed(1)

const baseURL = import.meta.env.VITE_API_URL
const MAX_ARRAY_LENGTH = 20

let i = 0
const next = () => {
    if (i === Number.MAX_SAFE_INTEGER - 1) {
        i = 0
    }
    return i++
}

export const handlers = [
    http.get(`${baseURL}/`, async () => {
        const resultArray = [[undefined, { status: 200 }]]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.get(`${baseURL}/characters`, async () => {
        const resultArray = [
            [
                await getCharactersControllerGetAllCharacters200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerGetAllCharacters500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.post(`${baseURL}/characters`, async () => {
        const resultArray = [
            [
                await getCharactersControllerAddNewCharacter200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerAddNewCharacter400Response(),
                { status: 400 },
            ],
            [
                await getCharactersControllerAddNewCharacter500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.get(`${baseURL}/characters/sorted`, async () => {
        const resultArray = [
            [
                await getCharactersControllerGetCharactersOrderedByScore200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerGetCharactersOrderedByScore500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.get(`${baseURL}/characters/pair`, async () => {
        const resultArray = [
            [
                await getCharactersControllerGetPairOfCharacters200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerGetPairOfCharacters500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.patch(`${baseURL}/characters/:id/up`, async () => {
        const resultArray = [
            [
                await getCharactersControllerIncrementScoreForCharacter200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerIncrementScoreForCharacter500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
    http.patch(`${baseURL}/characters/:id/down`, async () => {
        const resultArray = [
            [
                await getCharactersControllerDecrementScoreForCharacter200Response(),
                { status: 200 },
            ],
            [
                await getCharactersControllerDecrementScoreForCharacter500Response(),
                { status: 500 },
            ],
        ]

        return HttpResponse.json(...resultArray[next() % resultArray.length])
    }),
]

export function getCharactersControllerGetAllCharacters200Response() {
    return [
        ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
    ].map((_) => ({
        id: faker.number.int(),
        name: faker.person.fullName(),
        imageUrl: faker.image.url(),
        score: faker.number.int(),
    }))
}

export function getCharactersControllerGetAllCharacters500Response() {
    return null
}

export function getCharactersControllerAddNewCharacter200Response() {
    return {
        id: faker.number.int(),
        name: faker.person.fullName(),
        imageFileName: faker.person.fullName(),
        score: faker.number.int(),
    }
}

export function getCharactersControllerAddNewCharacter400Response() {
    return null
}

export function getCharactersControllerAddNewCharacter500Response() {
    return null
}

export function getCharactersControllerGetCharactersOrderedByScore200Response() {
    return [
        ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
    ].map((_) => ({
        id: faker.number.int(),
        name: faker.person.fullName(),
        imageUrl: faker.image.url(),
        score: faker.number.int(),
    }))
}

export function getCharactersControllerGetCharactersOrderedByScore500Response() {
    return null
}

export function getCharactersControllerGetPairOfCharacters200Response() {
    return [...new Array(faker.number.int({ min: 1, max: 2 })).keys()].map(
        (_) => ({
            id: faker.number.int(),
            name: faker.person.fullName(),
            imageUrl: faker.image.url(),
            score: faker.number.int(),
        })
    )
}

export function getCharactersControllerGetPairOfCharacters500Response() {
    return null
}

export function getCharactersControllerIncrementScoreForCharacter200Response() {
    return {
        id: faker.number.int(),
        name: faker.person.fullName(),
        imageUrl: faker.image.url(),
        score: faker.number.int(),
    }
}

export function getCharactersControllerIncrementScoreForCharacter500Response() {
    return null
}

export function getCharactersControllerDecrementScoreForCharacter200Response() {
    return {
        id: faker.number.int(),
        name: faker.person.fullName(),
        imageUrl: faker.image.url(),
        score: faker.number.int(),
    }
}

export function getCharactersControllerDecrementScoreForCharacter500Response() {
    return null
}
